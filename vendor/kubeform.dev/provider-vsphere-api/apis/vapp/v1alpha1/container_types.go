/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Container struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ContainerSpec   `json:"spec,omitempty"`
	Status            ContainerStatus `json:"status,omitempty"`
}

type ContainerSpec struct {
	State *ContainerSpecResource `json:"state,omitempty" tf:"-"`

	Resource ContainerSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type ContainerSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has unreserved resources.
	// +optional
	CpuExpandable *bool `json:"cpuExpandable,omitempty" tf:"cpu_expandable"`
	// The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	// +optional
	CpuLimit *int64 `json:"cpuLimit,omitempty" tf:"cpu_limit"`
	// Amount of CPU (MHz) that is guaranteed available to the vApp container.
	// +optional
	CpuReservation *int64 `json:"cpuReservation,omitempty" tf:"cpu_reservation"`
	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	// +optional
	CpuShareLevel *string `json:"cpuShareLevel,omitempty" tf:"cpu_share_level"`
	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, cpu_share_level must be custom.
	// +optional
	CpuShares *int64 `json:"cpuShares,omitempty" tf:"cpu_shares"`
	// A list of custom attributes to set on this resource.
	// +optional
	CustomAttributes *map[string]string `json:"customAttributes,omitempty" tf:"custom_attributes"`
	// Determines if the reservation on a vApp container can grow beyond the specified value, if the parent resource pool has unreserved resources.
	// +optional
	MemoryExpandable *bool `json:"memoryExpandable,omitempty" tf:"memory_expandable"`
	// The utilization of a vApp container will not exceed this limit, even if there are available resources. Set to -1 for unlimited.
	// +optional
	MemoryLimit *int64 `json:"memoryLimit,omitempty" tf:"memory_limit"`
	// Amount of memory (MB) that is guaranteed available to the vApp container.
	// +optional
	MemoryReservation *int64 `json:"memoryReservation,omitempty" tf:"memory_reservation"`
	// The allocation level. The level is a simplified view of shares. Levels map to a pre-determined set of numeric values for shares. Can be one of low, normal, high, or custom.
	// +optional
	MemoryShareLevel *string `json:"memoryShareLevel,omitempty" tf:"memory_share_level"`
	// The number of shares allocated. Used to determine resource allocation in case of resource contention. If this is set, memory_share_level must be custom.
	// +optional
	MemoryShares *int64 `json:"memoryShares,omitempty" tf:"memory_shares"`
	// The name of the vApp container.
	Name *string `json:"name" tf:"name"`
	// The ID of the parent VM folder.
	// +optional
	ParentFolderID *string `json:"parentFolderID,omitempty" tf:"parent_folder_id"`
	// The managed object ID of the parent resource pool or the compute resource the vApp container is in.
	ParentResourcePoolID *string `json:"parentResourcePoolID" tf:"parent_resource_pool_id"`
	// A list of tag IDs to apply to this object.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
}

type ContainerStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// ContainerList is a list of Containers
type ContainerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Container CRD objects
	Items []Container `json:"items,omitempty"`
}
