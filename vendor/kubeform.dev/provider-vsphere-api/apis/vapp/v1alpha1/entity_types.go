/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Entity struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EntitySpec   `json:"spec,omitempty"`
	Status            EntityStatus `json:"status,omitempty"`
}

type EntitySpec struct {
	State *EntitySpecResource `json:"state,omitempty" tf:"-"`

	Resource EntitySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type EntitySpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Managed object ID of the vApp container the entity is a member of.
	ContainerID *string `json:"containerID" tf:"container_id"`
	// A list of custom attributes to set on this resource.
	// +optional
	CustomAttributes *map[string]string `json:"customAttributes,omitempty" tf:"custom_attributes"`
	// How to start the entity. Valid settings are none or powerOn. If set to none, then the entity does not participate in auto-start.
	// +optional
	StartAction *string `json:"startAction,omitempty" tf:"start_action"`
	// Delay in seconds before continuing with the next entity in the order of entities to be started.
	// +optional
	StartDelay *int64 `json:"startDelay,omitempty" tf:"start_delay"`
	// Order to start and stop target in vApp.
	// +optional
	StartOrder *int64 `json:"startOrder,omitempty" tf:"start_order"`
	// Defines the stop action for the entity. Can be set to none, powerOff, guestShutdown, or suspend. If set to none, then the entity does not participate in auto-stop.
	// +optional
	StopAction *string `json:"stopAction,omitempty" tf:"stop_action"`
	// Delay in seconds before continuing with the next entity in the order of entities to be stopped.
	// +optional
	StopDelay *int64 `json:"stopDelay,omitempty" tf:"stop_delay"`
	// A list of tag IDs to apply to this object.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// Managed object ID of the entity to power on or power off. This can be a virtual machine or a vApp.
	TargetID *string `json:"targetID" tf:"target_id"`
	// Determines if the VM should be marked as being started when VMware Tools are ready instead of waiting for start_delay. This property has no effect for vApps.
	// +optional
	WaitForGuest *bool `json:"waitForGuest,omitempty" tf:"wait_for_guest"`
}

type EntityStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// EntityList is a list of Entitys
type EntityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Entity CRD objects
	Items []Entity `json:"items,omitempty"`
}
