/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type Datastore struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DatastoreSpec   `json:"spec,omitempty"`
	Status            DatastoreStatus `json:"status,omitempty"`
}

type DatastoreSpec struct {
	State *DatastoreSpecResource `json:"state,omitempty" tf:"-"`

	Resource DatastoreSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type DatastoreSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Access mode for the mount point. Can be one of readOnly or readWrite.
	// +optional
	AccessMode *string `json:"accessMode,omitempty" tf:"access_mode"`
	// The connectivity status of the datastore. If this is false, some other computed attributes may be out of date.
	// +optional
	Accessible *bool `json:"accessible,omitempty" tf:"accessible"`
	// Maximum capacity of the datastore, in MB.
	// +optional
	Capacity *int64 `json:"capacity,omitempty" tf:"capacity"`
	// A list of custom attributes to set on this resource.
	// +optional
	CustomAttributes *map[string]string `json:"customAttributes,omitempty" tf:"custom_attributes"`
	// The managed object ID of the datastore cluster to place the datastore in.
	// +optional
	DatastoreClusterID *string `json:"datastoreClusterID,omitempty" tf:"datastore_cluster_id"`
	// The path to the datastore folder to put the datastore in.
	// +optional
	Folder *string `json:"folder,omitempty" tf:"folder"`
	// Available space of this datastore, in MB.
	// +optional
	FreeSpace *int64 `json:"freeSpace,omitempty" tf:"free_space"`
	// The managed object IDs of the hosts to mount the datastore on.
	// +kubebuilder:validation:MinItems=1
	HostSystemIDS []string `json:"hostSystemIDS" tf:"host_system_ids"`
	// The current maintenance mode state of the datastore.
	// +optional
	MaintenanceMode *string `json:"maintenanceMode,omitempty" tf:"maintenance_mode"`
	// If true, more than one host in the datacenter has been configured with access to the datastore.
	// +optional
	MultipleHostAccess *bool `json:"multipleHostAccess,omitempty" tf:"multiple_host_access"`
	// The name of the datastore.
	Name *string `json:"name" tf:"name"`
	// Indicates that this NAS volume is a protocol endpoint. This field is only populated if the host supports virtual datastores.
	// +optional
	ProtocolEndpoint *bool `json:"protocolEndpoint,omitempty" tf:"protocol_endpoint"`
	// The hostnames or IP addresses of the remote server or servers. Only one element should be present for NFS v3 but multiple can be present for NFS v4.1.
	// +kubebuilder:validation:MinItems=1
	RemoteHosts []string `json:"remoteHosts" tf:"remote_hosts"`
	// The remote path of the mount point.
	RemotePath *string `json:"remotePath" tf:"remote_path"`
	// The security type to use.
	// +optional
	SecurityType *string `json:"securityType,omitempty" tf:"security_type"`
	// A list of tag IDs to apply to this object.
	// +optional
	Tags []string `json:"tags,omitempty" tf:"tags"`
	// The type of NAS volume. Can be one of NFS (to denote v3) or NFS41 (to denote NFS v4.1).
	// +optional
	Type *string `json:"type,omitempty" tf:"type"`
	// Total additional storage space, in MB, potentially used by all virtual machines on this datastore.
	// +optional
	UncommittedSpace *int64 `json:"uncommittedSpace,omitempty" tf:"uncommitted_space"`
	// The unique locator for the datastore.
	// +optional
	Url *string `json:"url,omitempty" tf:"url"`
}

type DatastoreStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// DatastoreList is a list of Datastores
type DatastoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of Datastore CRD objects
	Items []Datastore `json:"items,omitempty"`
}
