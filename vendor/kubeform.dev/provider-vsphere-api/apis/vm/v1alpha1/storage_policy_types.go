/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type StoragePolicy struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StoragePolicySpec   `json:"spec,omitempty"`
	Status            StoragePolicyStatus `json:"status,omitempty"`
}

type StoragePolicySpecTagRules struct {
	// Whether to include or exclude datastores tagged with the provided tags
	// +optional
	IncludeDatastoresWithTags *bool `json:"includeDatastoresWithTags,omitempty" tf:"include_datastores_with_tags"`
	// The tag category to select the tags from.
	TagCategory *string `json:"tagCategory" tf:"tag_category"`
	// The tags to use for creating a tag-based vm placement rule.
	// +kubebuilder:validation:MinItems=1
	Tags []string `json:"tags" tf:"tags"`
}

type StoragePolicySpec struct {
	State *StoragePolicySpecResource `json:"state,omitempty" tf:"-"`

	Resource StoragePolicySpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`
}

type StoragePolicySpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// Description of the storage policy.
	// +optional
	Description *string `json:"description,omitempty" tf:"description"`
	// Name of the storage policy.
	Name *string `json:"name" tf:"name"`
	// Tag rules to filter datastores to be used for placement of VMs.
	TagRules []StoragePolicySpecTagRules `json:"tagRules" tf:"tag_rules"`
}

type StoragePolicyStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// StoragePolicyList is a list of StoragePolicys
type StoragePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of StoragePolicy CRD objects
	Items []StoragePolicy `json:"items,omitempty"`
}
