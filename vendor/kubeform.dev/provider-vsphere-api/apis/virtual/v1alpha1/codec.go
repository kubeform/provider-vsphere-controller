/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	"unsafe"

	jsoniter "github.com/json-iterator/go"
	"github.com/modern-go/reflect2"
)

func GetEncoder() map[string]jsoniter.ValEncoder {
	return map[string]jsoniter.ValEncoder{
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCdrom{}).Type1()):                        MachineSpecCdromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecClone{}).Type1()):                        MachineSpecCloneCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomize{}).Type1()):               MachineSpecCloneCustomizeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomizeLinuxOptions{}).Type1()):   MachineSpecCloneCustomizeLinuxOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomizeWindowsOptions{}).Type1()): MachineSpecCloneCustomizeWindowsOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecOvfDeploy{}).Type1()):                    MachineSpecOvfDeployCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecVapp{}).Type1()):                         MachineSpecVappCodec{},
	}
}

func GetDecoder() map[string]jsoniter.ValDecoder {
	return map[string]jsoniter.ValDecoder{
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCdrom{}).Type1()):                        MachineSpecCdromCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecClone{}).Type1()):                        MachineSpecCloneCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomize{}).Type1()):               MachineSpecCloneCustomizeCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomizeLinuxOptions{}).Type1()):   MachineSpecCloneCustomizeLinuxOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomizeWindowsOptions{}).Type1()): MachineSpecCloneCustomizeWindowsOptionsCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecOvfDeploy{}).Type1()):                    MachineSpecOvfDeployCodec{},
		jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecVapp{}).Type1()):                         MachineSpecVappCodec{},
	}
}

func getEncodersWithout(typ string) map[string]jsoniter.ValEncoder {
	origMap := GetEncoder()
	delete(origMap, typ)
	return origMap
}

func getDecodersWithout(typ string) map[string]jsoniter.ValDecoder {
	origMap := GetDecoder()
	delete(origMap, typ)
	return origMap
}

// +k8s:deepcopy-gen=false
type MachineSpecCdromCodec struct {
}

func (MachineSpecCdromCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MachineSpecCdrom)(ptr) == nil
}

func (MachineSpecCdromCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MachineSpecCdrom)(ptr)
	var objs []MachineSpecCdrom
	if obj != nil {
		objs = []MachineSpecCdrom{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCdrom{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MachineSpecCdromCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MachineSpecCdrom)(ptr) = MachineSpecCdrom{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MachineSpecCdrom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCdrom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MachineSpecCdrom)(ptr) = objs[0]
			} else {
				*(*MachineSpecCdrom)(ptr) = MachineSpecCdrom{}
			}
		} else {
			*(*MachineSpecCdrom)(ptr) = MachineSpecCdrom{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj MachineSpecCdrom

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCdrom{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*MachineSpecCdrom)(ptr) = obj
		} else {
			*(*MachineSpecCdrom)(ptr) = MachineSpecCdrom{}
		}
	default:
		iter.ReportError("decode MachineSpecCdrom", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MachineSpecCloneCodec struct {
}

func (MachineSpecCloneCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MachineSpecClone)(ptr) == nil
}

func (MachineSpecCloneCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MachineSpecClone)(ptr)
	var objs []MachineSpecClone
	if obj != nil {
		objs = []MachineSpecClone{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecClone{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MachineSpecCloneCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MachineSpecClone)(ptr) = MachineSpecClone{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MachineSpecClone

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecClone{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MachineSpecClone)(ptr) = objs[0]
			} else {
				*(*MachineSpecClone)(ptr) = MachineSpecClone{}
			}
		} else {
			*(*MachineSpecClone)(ptr) = MachineSpecClone{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj MachineSpecClone

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecClone{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*MachineSpecClone)(ptr) = obj
		} else {
			*(*MachineSpecClone)(ptr) = MachineSpecClone{}
		}
	default:
		iter.ReportError("decode MachineSpecClone", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MachineSpecCloneCustomizeCodec struct {
}

func (MachineSpecCloneCustomizeCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MachineSpecCloneCustomize)(ptr) == nil
}

func (MachineSpecCloneCustomizeCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MachineSpecCloneCustomize)(ptr)
	var objs []MachineSpecCloneCustomize
	if obj != nil {
		objs = []MachineSpecCloneCustomize{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomize{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MachineSpecCloneCustomizeCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MachineSpecCloneCustomize)(ptr) = MachineSpecCloneCustomize{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MachineSpecCloneCustomize

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomize{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MachineSpecCloneCustomize)(ptr) = objs[0]
			} else {
				*(*MachineSpecCloneCustomize)(ptr) = MachineSpecCloneCustomize{}
			}
		} else {
			*(*MachineSpecCloneCustomize)(ptr) = MachineSpecCloneCustomize{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj MachineSpecCloneCustomize

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomize{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*MachineSpecCloneCustomize)(ptr) = obj
		} else {
			*(*MachineSpecCloneCustomize)(ptr) = MachineSpecCloneCustomize{}
		}
	default:
		iter.ReportError("decode MachineSpecCloneCustomize", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MachineSpecCloneCustomizeLinuxOptionsCodec struct {
}

func (MachineSpecCloneCustomizeLinuxOptionsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MachineSpecCloneCustomizeLinuxOptions)(ptr) == nil
}

func (MachineSpecCloneCustomizeLinuxOptionsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MachineSpecCloneCustomizeLinuxOptions)(ptr)
	var objs []MachineSpecCloneCustomizeLinuxOptions
	if obj != nil {
		objs = []MachineSpecCloneCustomizeLinuxOptions{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomizeLinuxOptions{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MachineSpecCloneCustomizeLinuxOptionsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MachineSpecCloneCustomizeLinuxOptions)(ptr) = MachineSpecCloneCustomizeLinuxOptions{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MachineSpecCloneCustomizeLinuxOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomizeLinuxOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MachineSpecCloneCustomizeLinuxOptions)(ptr) = objs[0]
			} else {
				*(*MachineSpecCloneCustomizeLinuxOptions)(ptr) = MachineSpecCloneCustomizeLinuxOptions{}
			}
		} else {
			*(*MachineSpecCloneCustomizeLinuxOptions)(ptr) = MachineSpecCloneCustomizeLinuxOptions{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj MachineSpecCloneCustomizeLinuxOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomizeLinuxOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*MachineSpecCloneCustomizeLinuxOptions)(ptr) = obj
		} else {
			*(*MachineSpecCloneCustomizeLinuxOptions)(ptr) = MachineSpecCloneCustomizeLinuxOptions{}
		}
	default:
		iter.ReportError("decode MachineSpecCloneCustomizeLinuxOptions", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MachineSpecCloneCustomizeWindowsOptionsCodec struct {
}

func (MachineSpecCloneCustomizeWindowsOptionsCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MachineSpecCloneCustomizeWindowsOptions)(ptr) == nil
}

func (MachineSpecCloneCustomizeWindowsOptionsCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MachineSpecCloneCustomizeWindowsOptions)(ptr)
	var objs []MachineSpecCloneCustomizeWindowsOptions
	if obj != nil {
		objs = []MachineSpecCloneCustomizeWindowsOptions{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomizeWindowsOptions{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MachineSpecCloneCustomizeWindowsOptionsCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MachineSpecCloneCustomizeWindowsOptions)(ptr) = MachineSpecCloneCustomizeWindowsOptions{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MachineSpecCloneCustomizeWindowsOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomizeWindowsOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MachineSpecCloneCustomizeWindowsOptions)(ptr) = objs[0]
			} else {
				*(*MachineSpecCloneCustomizeWindowsOptions)(ptr) = MachineSpecCloneCustomizeWindowsOptions{}
			}
		} else {
			*(*MachineSpecCloneCustomizeWindowsOptions)(ptr) = MachineSpecCloneCustomizeWindowsOptions{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj MachineSpecCloneCustomizeWindowsOptions

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecCloneCustomizeWindowsOptions{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*MachineSpecCloneCustomizeWindowsOptions)(ptr) = obj
		} else {
			*(*MachineSpecCloneCustomizeWindowsOptions)(ptr) = MachineSpecCloneCustomizeWindowsOptions{}
		}
	default:
		iter.ReportError("decode MachineSpecCloneCustomizeWindowsOptions", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MachineSpecOvfDeployCodec struct {
}

func (MachineSpecOvfDeployCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MachineSpecOvfDeploy)(ptr) == nil
}

func (MachineSpecOvfDeployCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MachineSpecOvfDeploy)(ptr)
	var objs []MachineSpecOvfDeploy
	if obj != nil {
		objs = []MachineSpecOvfDeploy{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecOvfDeploy{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MachineSpecOvfDeployCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MachineSpecOvfDeploy)(ptr) = MachineSpecOvfDeploy{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MachineSpecOvfDeploy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecOvfDeploy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MachineSpecOvfDeploy)(ptr) = objs[0]
			} else {
				*(*MachineSpecOvfDeploy)(ptr) = MachineSpecOvfDeploy{}
			}
		} else {
			*(*MachineSpecOvfDeploy)(ptr) = MachineSpecOvfDeploy{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj MachineSpecOvfDeploy

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecOvfDeploy{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*MachineSpecOvfDeploy)(ptr) = obj
		} else {
			*(*MachineSpecOvfDeploy)(ptr) = MachineSpecOvfDeploy{}
		}
	default:
		iter.ReportError("decode MachineSpecOvfDeploy", "unexpected JSON type")
	}
}

// +k8s:deepcopy-gen=false
type MachineSpecVappCodec struct {
}

func (MachineSpecVappCodec) IsEmpty(ptr unsafe.Pointer) bool {
	return (*MachineSpecVapp)(ptr) == nil
}

func (MachineSpecVappCodec) Encode(ptr unsafe.Pointer, stream *jsoniter.Stream) {
	obj := (*MachineSpecVapp)(ptr)
	var objs []MachineSpecVapp
	if obj != nil {
		objs = []MachineSpecVapp{*obj}
	}

	jsonit := jsoniter.Config{
		EscapeHTML:             true,
		SortMapKeys:            true,
		ValidateJsonRawMessage: true,
		TagKey:                 "tf",
		TypeEncoders:           getEncodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecVapp{}).Type1())),
	}.Froze()

	byt, _ := jsonit.Marshal(objs)

	stream.Write(byt)
}

func (MachineSpecVappCodec) Decode(ptr unsafe.Pointer, iter *jsoniter.Iterator) {
	switch iter.WhatIsNext() {
	case jsoniter.NilValue:
		iter.Skip()
		*(*MachineSpecVapp)(ptr) = MachineSpecVapp{}
		return
	case jsoniter.ArrayValue:
		objsByte := iter.SkipAndReturnBytes()
		if len(objsByte) > 0 {
			var objs []MachineSpecVapp

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecVapp{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objsByte, &objs)

			if len(objs) > 0 {
				*(*MachineSpecVapp)(ptr) = objs[0]
			} else {
				*(*MachineSpecVapp)(ptr) = MachineSpecVapp{}
			}
		} else {
			*(*MachineSpecVapp)(ptr) = MachineSpecVapp{}
		}
	case jsoniter.ObjectValue:
		objByte := iter.SkipAndReturnBytes()
		if len(objByte) > 0 {
			var obj MachineSpecVapp

			jsonit := jsoniter.Config{
				EscapeHTML:             true,
				SortMapKeys:            true,
				ValidateJsonRawMessage: true,
				TagKey:                 "tf",
				TypeDecoders:           getDecodersWithout(jsoniter.MustGetKind(reflect2.TypeOf(MachineSpecVapp{}).Type1())),
			}.Froze()
			jsonit.Unmarshal(objByte, &obj)

			*(*MachineSpecVapp)(ptr) = obj
		} else {
			*(*MachineSpecVapp)(ptr) = MachineSpecVapp{}
		}
	default:
		iter.ReportError("decode MachineSpecVapp", "unexpected JSON type")
	}
}
