/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by Kubeform. DO NOT EDIT.

package v1alpha1

import (
	base "kubeform.dev/apimachinery/api/v1alpha1"

	core "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	kmapi "kmodules.xyz/client-go/api/v1"
	"sigs.k8s.io/cli-utils/pkg/kstatus/status"
)

// +genclient
// +k8s:openapi-gen=true
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:printcolumn:name="Phase",type=string,JSONPath=`.status.phase`

type VmOverride struct {
	metav1.TypeMeta   `json:",inline,omitempty"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VmOverrideSpec   `json:"spec,omitempty"`
	Status            VmOverrideStatus `json:"status,omitempty"`
}

type VmOverrideSpec struct {
	State *VmOverrideSpecResource `json:"state,omitempty" tf:"-"`

	Resource VmOverrideSpecResource `json:"resource" tf:"resource"`

	UpdatePolicy base.UpdatePolicy `json:"updatePolicy,omitempty" tf:"-"`

	TerminationPolicy base.TerminationPolicy `json:"terminationPolicy,omitempty" tf:"-"`

	ProviderRef core.LocalObjectReference `json:"providerRef" tf:"-"`

	BackendRef *core.LocalObjectReference `json:"backendRef,omitempty" tf:"-"`
}

type VmOverrideSpecResource struct {
	ID string `json:"id,omitempty" tf:"id,omitempty"`

	// The managed object ID of the cluster.
	ComputeClusterID *string `json:"computeClusterID" tf:"compute_cluster_id"`
	// Controls the action to take on this virtual machine if an APD status on an affected datastore clears in the middle of an APD event. Can be one of useClusterDefault, none or reset.
	// +optional
	HaDatastoreApdRecoveryAction *string `json:"haDatastoreApdRecoveryAction,omitempty" tf:"ha_datastore_apd_recovery_action"`
	// Controls the action to take on this virtual machine when the cluster has detected loss to all paths to a relevant datastore. Can be one of clusterDefault, disabled, warning, restartConservative, or restartAggressive.
	// +optional
	HaDatastoreApdResponse *string `json:"haDatastoreApdResponse,omitempty" tf:"ha_datastore_apd_response"`
	// Controls the delay in seconds to wait after an APD timeout event to execute the response action defined in ha_datastore_apd_response. Specify -1 to use the cluster setting.
	// +optional
	HaDatastoreApdResponseDelay *int64 `json:"haDatastoreApdResponseDelay,omitempty" tf:"ha_datastore_apd_response_delay"`
	// Controls the action to take on this virtual machine when the cluster has detected a permanent device loss to a relevant datastore. Can be one of clusterDefault, disabled, warning, or restartAggressive.
	// +optional
	HaDatastorePdlResponse *string `json:"haDatastorePdlResponse,omitempty" tf:"ha_datastore_pdl_response"`
	// The action to take on this virtual machine when a host is isolated from the rest of the cluster. Can be one of clusterIsolationResponse, none, powerOff, or shutdown.
	// +optional
	HaHostIsolationResponse *string `json:"haHostIsolationResponse,omitempty" tf:"ha_host_isolation_response"`
	// If a heartbeat from this virtual machine is not received within this configured interval, the virtual machine is marked as failed. The value is in seconds.
	// +optional
	HaVmFailureInterval *int64 `json:"haVmFailureInterval,omitempty" tf:"ha_vm_failure_interval"`
	// The length of the reset window in which ha_vm_maximum_resets can operate. When this window expires, no more resets are attempted regardless of the setting configured in ha_vm_maximum_resets. -1 means no window, meaning an unlimited reset time is allotted.
	// +optional
	HaVmMaximumFailureWindow *int64 `json:"haVmMaximumFailureWindow,omitempty" tf:"ha_vm_maximum_failure_window"`
	// The maximum number of resets that HA will perform to this virtual machine when responding to a failure event.
	// +optional
	HaVmMaximumResets *int64 `json:"haVmMaximumResets,omitempty" tf:"ha_vm_maximum_resets"`
	// The time, in seconds, that HA waits after powering on this virtual machine before monitoring for heartbeats.
	// +optional
	HaVmMinimumUptime *int64 `json:"haVmMinimumUptime,omitempty" tf:"ha_vm_minimum_uptime"`
	// The type of virtual machine monitoring to use for this virtual machine. Can be one of vmMonitoringDisabled, vmMonitoringOnly, or vmAndAppMonitoring.
	// +optional
	HaVmMonitoring *string `json:"haVmMonitoring,omitempty" tf:"ha_vm_monitoring"`
	// Determines whether or not the cluster's default settings or the VM override settings specified in this resource are used for virtual machine monitoring. The default is true (use cluster defaults) - set to false to have overrides take effect.
	// +optional
	HaVmMonitoringUseClusterDefaults *bool `json:"haVmMonitoringUseClusterDefaults,omitempty" tf:"ha_vm_monitoring_use_cluster_defaults"`
	// The restart priority for this virtual machine when vSphere detects a host failure. Can be one of clusterRestartPriority, lowest, low, medium, high, or highest.
	// +optional
	HaVmRestartPriority *string `json:"haVmRestartPriority,omitempty" tf:"ha_vm_restart_priority"`
	// The maximum time, in seconds, that vSphere HA will wait for the virtual machine to be ready. Use -1 to use the cluster default.
	// +optional
	HaVmRestartTimeout *int64 `json:"haVmRestartTimeout,omitempty" tf:"ha_vm_restart_timeout"`
	// The managed object ID of the virtual machine.
	VirtualMachineID *string `json:"virtualMachineID" tf:"virtual_machine_id"`
}

type VmOverrideStatus struct {
	// Resource generation, which is updated on mutation by the API Server.
	// +optional
	ObservedGeneration int64 `json:"observedGeneration,omitempty"`
	// +optional
	Phase status.Status `json:"phase,omitempty"`
	// +optional
	Conditions []kmapi.Condition `json:"conditions,omitempty"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +kubebuilder:object:root=true

// VmOverrideList is a list of VmOverrides
type VmOverrideList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	// Items is a list of VmOverride CRD objects
	Items []VmOverride `json:"items,omitempty"`
}
